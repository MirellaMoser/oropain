package ch.zhaw.mosltech.NoPainIsGainBackend.entity;

import java.util.ArrayList;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonIgnore;

import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.ManyToMany;
import lombok.Data;

/**
 * Entity representing a specific health situation or condition at a given time of day.
 * <p>
 * This class captures detailed information about an individual's health status at a particular time, 
 * including the level of pain and stress experienced, along with identified symptoms and stressors.
 * </p>
 */
@Entity // Marks this class as a JPA entity.
@Data   // Lombok annotation for generating boilerplate code like getters, setters, equals, hashCode, and toString methods.
public class Situation {

    /**
     * The unique identifier for each situation record.
     * <p>
     * It is automatically generated by the database. Marked with @JsonIgnore to exclude it from JSON serialization,
     * typically because it's meant for internal use.
     * </p>
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @JsonIgnore
    private Long id;

    /**
     * The time of day when the situation was recorded, categorized as morning, afternoon, or evening.
     */
    @Enumerated(EnumType.ORDINAL) // Indicates that JPA should store the enum as an integer.
    private ETimeOfDay timeOfDay;
    
    /**
     * The pain level reported in the situation, typically on a predefined scale (e.g., 0-10).
     */
    private Integer painLevel;

    /**
     * The stress level reported in the situation, also on a predefined scale.
     */
    private Integer stressLevel;

    /**
     * A list of symptoms identified in this specific situation.
     * <p>
     * This association supports many-to-many relationships between situations and symptoms, as a single
     * situation can include multiple symptoms, and a single symptom can appear in multiple situations.
     * </p>
     */
    @ManyToMany
    private List<Symptom> symptoms = new ArrayList<>();

    /**
     * A list of stressors identified in this specific situation.
     * <p>
     * Similar to symptoms, this many-to-many relationship allows for multiple stressors to be associated
     * with a single situation, and vice versa.
     * </p>
     */
    @ManyToMany
    private List<Stressor> stressors = new ArrayList<>();
}